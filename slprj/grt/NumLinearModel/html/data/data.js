var DataHeading = 'Code'; var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"NumLinearModel","ref":true,"files":[{"name":"NumLinearModel.cpp","type":"source","group":"model","path":"C:\\Users\\Gabriel Fernandes\\Desktop\\Tello\\slprj\\grt\\NumLinearModel","tag":"","groupDisplay":"Model files","code":"/*\r\n * Code generation for system model 'NumLinearModel'\r\n *\r\n * Model                      : NumLinearModel\r\n * Model version              : 6.27\r\n * Simulink Coder version : 25.1 (R2025a) 21-Nov-2024\r\n * C++ source code generated on : Fri May 30 20:24:35 2025\r\n *\r\n * Note that the functions contained in this file are part of a Simulink\r\n * model, and are not self-contained algorithms.\r\n */\r\n\r\n#include \"NumLinearModel.h\"\r\n#include \"rtwtypes.h\"\r\n#include <cmath>\r\n#include \"NumLinearModel_private.h\"\r\n\r\nP_NumLinearModel_T NumLinearModel::NumLinearModel_rtP{\r\n  /* Computed Parameter: u_control_out_Y0\r\n   * Referenced by: '<S1>/u_control_out'\r\n   */\r\n  {\r\n    0.0,                               /* uphi */\r\n    0.0,                               /* utheta */\r\n    0.0,                               /* uzp */\r\n    0.0                                /* uyaw */\r\n  },\r\n\r\n  /* Expression: 0.0\r\n   * Referenced by: '<S1>/Delay'\r\n   */\r\n  0.0,\r\n\r\n  /* Expression: 0.0\r\n   * Referenced by: '<S1>/Delay1'\r\n   */\r\n  0.0,\r\n\r\n  /* Expression: 0.0\r\n   * Referenced by: '<S1>/Delay2'\r\n   */\r\n  0.0,\r\n\r\n  /* Expression: 0.0\r\n   * Referenced by: '<S1>/Delay3'\r\n   */\r\n  0.0,\r\n\r\n  /* Expression: 2\r\n   * Referenced by: '<S2>/Constant'\r\n   */\r\n  2.0,\r\n\r\n  /* Expression: 2\r\n   * Referenced by: '<S2>/Constant1'\r\n   */\r\n  2.0,\r\n\r\n  /* Computed Parameter: Integrator1_gainval\r\n   * Referenced by: '<S2>/Integrator1'\r\n   */\r\n  0.01,\r\n\r\n  /* Expression: 0\r\n   * Referenced by: '<S2>/Integrator1'\r\n   */\r\n  0.0,\r\n\r\n  /* Computed Parameter: Integrator3_gainval\r\n   * Referenced by: '<S2>/Integrator3'\r\n   */\r\n  0.01,\r\n\r\n  /* Expression: 0\r\n   * Referenced by: '<S2>/Integrator3'\r\n   */\r\n  0.0,\r\n\r\n  /* Computed Parameter: Integrator5_gainval\r\n   * Referenced by: '<S2>/Integrator5'\r\n   */\r\n  0.01,\r\n\r\n  /* Expression: 0\r\n   * Referenced by: '<S2>/Integrator5'\r\n   */\r\n  0.0,\r\n\r\n  /* Computed Parameter: Integrator4_gainval\r\n   * Referenced by: '<S2>/Integrator4'\r\n   */\r\n  0.01,\r\n\r\n  /* Expression: 0\r\n   * Referenced by: '<S2>/Integrator4'\r\n   */\r\n  0.0,\r\n\r\n  /* Computed Parameter: Integrator6_gainval\r\n   * Referenced by: '<S2>/Integrator6'\r\n   */\r\n  0.01,\r\n\r\n  /* Expression: 0\r\n   * Referenced by: '<S2>/Integrator6'\r\n   */\r\n  0.0,\r\n\r\n  /* Computed Parameter: Integrator_gainval\r\n   * Referenced by: '<S2>/Integrator'\r\n   */\r\n  0.01,\r\n\r\n  /* Expression: 0\r\n   * Referenced by: '<S2>/Integrator'\r\n   */\r\n  0.0,\r\n\r\n  /* Computed Parameter: Integrator10_gainval\r\n   * Referenced by: '<S2>/Integrator10'\r\n   */\r\n  0.01,\r\n\r\n  /* Expression: 0\r\n   * Referenced by: '<S2>/Integrator10'\r\n   */\r\n  0.0,\r\n\r\n  /* Computed Parameter: Integrator11_gainval\r\n   * Referenced by: '<S2>/Integrator11'\r\n   */\r\n  0.01,\r\n\r\n  /* Expression: 0\r\n   * Referenced by: '<S2>/Integrator11'\r\n   */\r\n  0.0,\r\n\r\n  /* Computed Parameter: Integrator2_gainval\r\n   * Referenced by: '<S2>/Integrator2'\r\n   */\r\n  0.01,\r\n\r\n  /* Expression: 0\r\n   * Referenced by: '<S2>/Integrator2'\r\n   */\r\n  0.0,\r\n\r\n  /* Computed Parameter: Integrator7_gainval\r\n   * Referenced by: '<S2>/Integrator7'\r\n   */\r\n  0.01,\r\n\r\n  /* Expression: 0\r\n   * Referenced by: '<S2>/Integrator7'\r\n   */\r\n  0.0,\r\n\r\n  /* Computed Parameter: Integrator8_gainval\r\n   * Referenced by: '<S2>/Integrator8'\r\n   */\r\n  0.01,\r\n\r\n  /* Expression: 0\r\n   * Referenced by: '<S2>/Integrator8'\r\n   */\r\n  0.0,\r\n\r\n  /* Computed Parameter: Integrator9_gainval\r\n   * Referenced by: '<S2>/Integrator9'\r\n   */\r\n  0.01,\r\n\r\n  /* Expression: 0\r\n   * Referenced by: '<S2>/Integrator9'\r\n   */\r\n  0.0\r\n};\r\n\r\n/* System initialize for referenced model: 'NumLinearModel' */\r\nvoid NumLinearModel::init(void)\r\n{\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator1' */\r\n  NumLinearModel_DW.Integrator1_DSTATE = NumLinearModel_rtP.Integrator1_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator3' */\r\n  NumLinearModel_DW.Integrator3_DSTATE = NumLinearModel_rtP.Integrator3_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator5' */\r\n  NumLinearModel_DW.Integrator5_DSTATE = NumLinearModel_rtP.Integrator5_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator4' */\r\n  NumLinearModel_DW.Integrator4_DSTATE = NumLinearModel_rtP.Integrator4_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator6' */\r\n  NumLinearModel_DW.Integrator6_DSTATE = NumLinearModel_rtP.Integrator6_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator' */\r\n  NumLinearModel_DW.Integrator_DSTATE = NumLinearModel_rtP.Integrator_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator10' */\r\n  NumLinearModel_DW.Integrator10_DSTATE = NumLinearModel_rtP.Integrator10_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator11' */\r\n  NumLinearModel_DW.Integrator11_DSTATE = NumLinearModel_rtP.Integrator11_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator2' */\r\n  NumLinearModel_DW.Integrator2_DSTATE = NumLinearModel_rtP.Integrator2_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator7' */\r\n  NumLinearModel_DW.Integrator7_DSTATE = NumLinearModel_rtP.Integrator7_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator8' */\r\n  NumLinearModel_DW.Integrator8_DSTATE = NumLinearModel_rtP.Integrator8_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator9' */\r\n  NumLinearModel_DW.Integrator9_DSTATE = NumLinearModel_rtP.Integrator9_IC;\r\n\r\n  /* SystemInitialize for Enabled SubSystem: '<Root>/InputDelay' */\r\n  /* InitializeConditions for Delay: '<S1>/Delay' */\r\n  NumLinearModel_DW.Delay_DSTATE = NumLinearModel_rtP.Delay_InitialCondition;\r\n\r\n  /* InitializeConditions for Delay: '<S1>/Delay1' */\r\n  NumLinearModel_DW.Delay1_DSTATE = NumLinearModel_rtP.Delay1_InitialCondition;\r\n\r\n  /* InitializeConditions for Delay: '<S1>/Delay2' */\r\n  NumLinearModel_DW.Delay2_DSTATE = NumLinearModel_rtP.Delay2_InitialCondition;\r\n\r\n  /* InitializeConditions for Delay: '<S1>/Delay3' */\r\n  NumLinearModel_DW.Delay3_DSTATE = NumLinearModel_rtP.Delay3_InitialCondition;\r\n\r\n  /* SystemInitialize for Delay: '<S1>/Delay' incorporates:\r\n   *  Outport: '<S1>/u_control_out'\r\n   */\r\n  NumLinearModel_B.uphi = NumLinearModel_rtP.u_control_out_Y0.uphi;\r\n\r\n  /* SystemInitialize for Delay: '<S1>/Delay1' incorporates:\r\n   *  Outport: '<S1>/u_control_out'\r\n   */\r\n  NumLinearModel_B.utheta = NumLinearModel_rtP.u_control_out_Y0.utheta;\r\n\r\n  /* SystemInitialize for Delay: '<S1>/Delay2' incorporates:\r\n   *  Outport: '<S1>/u_control_out'\r\n   */\r\n  NumLinearModel_B.uzp = NumLinearModel_rtP.u_control_out_Y0.uzp;\r\n\r\n  /* SystemInitialize for Delay: '<S1>/Delay3' incorporates:\r\n   *  Outport: '<S1>/u_control_out'\r\n   */\r\n  NumLinearModel_B.uyaw = NumLinearModel_rtP.u_control_out_Y0.uyaw;\r\n\r\n  /* End of SystemInitialize for SubSystem: '<Root>/InputDelay' */\r\n}\r\n\r\n/* System reset for referenced model: 'NumLinearModel' */\r\nvoid NumLinearModel::reset(void)\r\n{\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator1' */\r\n  NumLinearModel_DW.Integrator1_DSTATE = NumLinearModel_rtP.Integrator1_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator3' */\r\n  NumLinearModel_DW.Integrator3_DSTATE = NumLinearModel_rtP.Integrator3_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator5' */\r\n  NumLinearModel_DW.Integrator5_DSTATE = NumLinearModel_rtP.Integrator5_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator4' */\r\n  NumLinearModel_DW.Integrator4_DSTATE = NumLinearModel_rtP.Integrator4_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator6' */\r\n  NumLinearModel_DW.Integrator6_DSTATE = NumLinearModel_rtP.Integrator6_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator' */\r\n  NumLinearModel_DW.Integrator_DSTATE = NumLinearModel_rtP.Integrator_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator10' */\r\n  NumLinearModel_DW.Integrator10_DSTATE = NumLinearModel_rtP.Integrator10_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator11' */\r\n  NumLinearModel_DW.Integrator11_DSTATE = NumLinearModel_rtP.Integrator11_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator2' */\r\n  NumLinearModel_DW.Integrator2_DSTATE = NumLinearModel_rtP.Integrator2_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator7' */\r\n  NumLinearModel_DW.Integrator7_DSTATE = NumLinearModel_rtP.Integrator7_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator8' */\r\n  NumLinearModel_DW.Integrator8_DSTATE = NumLinearModel_rtP.Integrator8_IC;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Integrator9' */\r\n  NumLinearModel_DW.Integrator9_DSTATE = NumLinearModel_rtP.Integrator9_IC;\r\n}\r\n\r\n/* Disable for referenced model: 'NumLinearModel' */\r\nvoid NumLinearModel::disable(void)\r\n{\r\n  /* Disable for Enabled SubSystem: '<Root>/InputDelay' */\r\n  NumLinearModel_DW.InputDelay_MODE = false;\r\n\r\n  /* End of Disable for SubSystem: '<Root>/InputDelay' */\r\n}\r\n\r\n/* Output and update for referenced model: 'NumLinearModel' */\r\nvoid NumLinearModel::step(const real_T *rtu_uphi, const real_T *rtu_utheta,\r\n  const real_T *rtu_uzp, const real_T *rtu_uyaw, real_T *rty_ground_truth_pose_x,\r\n  real_T *rty_ground_truth_pose_y, real_T *rty_ground_truth_pose_z, real_T\r\n  *rty_ground_truth_pose_roll, real_T *rty_ground_truth_pose_pitch, real_T\r\n  *rty_ground_truth_pose_yaw, real_T *rty_ground_truth_velocity_dx, real_T\r\n  *rty_ground_truth_velocity_dy, real_T *rty_ground_truth_velocity_dz, real_T\r\n  *rty_ground_truth_velocity_droll, real_T *rty_ground_truth_velocity_dpitc,\r\n  real_T *rty_ground_truth_velocity_dyaw, real_T\r\n  *rty_ground_truth_acceleration_d, real_T *rty_ground_truth_acceleration_e,\r\n  real_T *rty_ground_truth_acceleration_o, real_T rtp_Cx, real_T rtp_Cy,\r\n  boolean_T rtp_enable_input_delay, real_T rtp_gravity, real_T rtp_mass, real_T\r\n  rtp_phi_K, real_T rtp_phi_max, real_T rtp_phi_omega, real_T rtp_phi_zeta,\r\n  real_T rtp_theta_K, real_T rtp_theta_max, real_T rtp_theta_omega, real_T\r\n  rtp_theta_zeta, real_T rtp_yawp_K, real_T rtp_yawp_max, real_T rtp_yawp_tal,\r\n  real_T rtp_zp_K, real_T rtp_zp_max, real_T rtp_zp_tal)\r\n{\r\n  real_T cosOut;\r\n  real_T sinOut;\r\n  boolean_T tmp;\r\n  tmp = rtmIsSampleHit(getRTM(), 1);\r\n  if (tmp) {\r\n    /* Outputs for Enabled SubSystem: '<Root>/InputDelay' incorporates:\r\n     *  EnablePort: '<S1>/Enable'\r\n     */\r\n    /* Constant: '<Root>/Constant' */\r\n    if (rtp_enable_input_delay) {\r\n      if (!NumLinearModel_DW.InputDelay_MODE) {\r\n        /* InitializeConditions for Delay: '<S1>/Delay' */\r\n        NumLinearModel_DW.Delay_DSTATE =\r\n          NumLinearModel_rtP.Delay_InitialCondition;\r\n\r\n        /* InitializeConditions for Delay: '<S1>/Delay1' */\r\n        NumLinearModel_DW.Delay1_DSTATE =\r\n          NumLinearModel_rtP.Delay1_InitialCondition;\r\n\r\n        /* InitializeConditions for Delay: '<S1>/Delay2' */\r\n        NumLinearModel_DW.Delay2_DSTATE =\r\n          NumLinearModel_rtP.Delay2_InitialCondition;\r\n\r\n        /* InitializeConditions for Delay: '<S1>/Delay3' */\r\n        NumLinearModel_DW.Delay3_DSTATE =\r\n          NumLinearModel_rtP.Delay3_InitialCondition;\r\n        NumLinearModel_DW.InputDelay_MODE = true;\r\n      }\r\n\r\n      /* Delay: '<S1>/Delay' */\r\n      NumLinearModel_B.uphi = NumLinearModel_DW.Delay_DSTATE;\r\n\r\n      /* Delay: '<S1>/Delay1' */\r\n      NumLinearModel_B.utheta = NumLinearModel_DW.Delay1_DSTATE;\r\n\r\n      /* Delay: '<S1>/Delay2' */\r\n      NumLinearModel_B.uzp = NumLinearModel_DW.Delay2_DSTATE;\r\n\r\n      /* Delay: '<S1>/Delay3' */\r\n      NumLinearModel_B.uyaw = NumLinearModel_DW.Delay3_DSTATE;\r\n\r\n      /* Update for Delay: '<S1>/Delay' */\r\n      NumLinearModel_DW.Delay_DSTATE = *rtu_uphi;\r\n\r\n      /* Update for Delay: '<S1>/Delay1' */\r\n      NumLinearModel_DW.Delay1_DSTATE = *rtu_utheta;\r\n\r\n      /* Update for Delay: '<S1>/Delay2' */\r\n      NumLinearModel_DW.Delay2_DSTATE = *rtu_uzp;\r\n\r\n      /* Update for Delay: '<S1>/Delay3' */\r\n      NumLinearModel_DW.Delay3_DSTATE = *rtu_uyaw;\r\n    } else {\r\n      NumLinearModel_DW.InputDelay_MODE = false;\r\n    }\r\n\r\n    /* End of Constant: '<Root>/Constant' */\r\n    /* End of Outputs for SubSystem: '<Root>/InputDelay' */\r\n\r\n    /* Product: '<S2>/Divide' incorporates:\r\n     *  Constant: '<S3>/Constant11'\r\n     *  Constant: '<S3>/Constant8'\r\n     *  Constant: '<S3>/Constant9'\r\n     */\r\n    NumLinearModel_B.Divide = NumLinearModel_B.uyaw * rtp_yawp_K * rtp_yawp_max /\r\n      rtp_yawp_tal;\r\n\r\n    /* Product: '<S2>/Divide2' incorporates:\r\n     *  Constant: '<S3>/Constant10'\r\n     *  Constant: '<S3>/Constant12'\r\n     *  Constant: '<S3>/Constant13'\r\n     */\r\n    NumLinearModel_B.Divide2 = NumLinearModel_B.uzp * rtp_zp_K * rtp_zp_max /\r\n      rtp_zp_tal;\r\n\r\n    /* Product: '<S2>/Product' incorporates:\r\n     *  Constant: '<S3>/Constant'\r\n     *  Constant: '<S3>/Constant1'\r\n     *  Constant: '<S3>/Constant2'\r\n     */\r\n    NumLinearModel_B.Product = NumLinearModel_B.uphi * rtp_phi_K * rtp_phi_omega\r\n      * rtp_phi_omega * rtp_phi_max;\r\n\r\n    /* Product: '<S2>/Product3' incorporates:\r\n     *  Constant: '<S3>/Constant4'\r\n     *  Constant: '<S3>/Constant5'\r\n     *  Constant: '<S3>/Constant6'\r\n     */\r\n    NumLinearModel_B.Product3 = NumLinearModel_B.utheta * rtp_theta_K *\r\n      rtp_theta_omega * rtp_theta_omega * rtp_theta_max;\r\n  }\r\n\r\n  /* DiscreteIntegrator: '<S2>/Integrator1' */\r\n  *rty_ground_truth_pose_roll = NumLinearModel_DW.Integrator1_DSTATE;\r\n\r\n  /* Trigonometry: '<S2>/Cos2' */\r\n  cosOut = *rty_ground_truth_pose_roll;\r\n  sinOut = std::sin(cosOut);\r\n  cosOut = std::cos(cosOut);\r\n\r\n  /* Trigonometry: '<S2>/Cos2' */\r\n  NumLinearModel_B.Cos2_o1 = sinOut;\r\n\r\n  /* Trigonometry: '<S2>/Cos2' */\r\n  NumLinearModel_B.Cos2_o2 = cosOut;\r\n\r\n  /* DiscreteIntegrator: '<S2>/Integrator3' */\r\n  *rty_ground_truth_pose_pitch = NumLinearModel_DW.Integrator3_DSTATE;\r\n\r\n  /* Trigonometry: '<S2>/Cos3' */\r\n  cosOut = *rty_ground_truth_pose_pitch;\r\n  sinOut = std::sin(cosOut);\r\n  cosOut = std::cos(cosOut);\r\n\r\n  /* Trigonometry: '<S2>/Cos3' */\r\n  NumLinearModel_B.Cos3_o1 = sinOut;\r\n\r\n  /* Trigonometry: '<S2>/Cos3' */\r\n  NumLinearModel_B.Cos3_o2 = cosOut;\r\n\r\n  /* DiscreteIntegrator: '<S2>/Integrator5' */\r\n  *rty_ground_truth_pose_yaw = NumLinearModel_DW.Integrator5_DSTATE;\r\n\r\n  /* Trigonometry: '<S2>/Cos4' */\r\n  cosOut = *rty_ground_truth_pose_yaw;\r\n  sinOut = std::sin(cosOut);\r\n  cosOut = std::cos(cosOut);\r\n\r\n  /* Trigonometry: '<S2>/Cos4' */\r\n  NumLinearModel_B.Cos4_o1 = sinOut;\r\n\r\n  /* Trigonometry: '<S2>/Cos4' */\r\n  NumLinearModel_B.Cos4_o2 = cosOut;\r\n\r\n  /* DiscreteIntegrator: '<S2>/Integrator4' */\r\n  *rty_ground_truth_velocity_dyaw = NumLinearModel_DW.Integrator4_DSTATE;\r\n\r\n  /* Product: '<S2>/Divide1' incorporates:\r\n   *  Constant: '<S3>/Constant11'\r\n   */\r\n  NumLinearModel_B.Divide1 = *rty_ground_truth_velocity_dyaw / rtp_yawp_tal;\r\n\r\n  /* DiscreteIntegrator: '<S2>/Integrator6' */\r\n  *rty_ground_truth_velocity_dz = NumLinearModel_DW.Integrator6_DSTATE;\r\n\r\n  /* Product: '<S2>/Divide3' incorporates:\r\n   *  Constant: '<S3>/Constant10'\r\n   */\r\n  NumLinearModel_B.Divide3 = *rty_ground_truth_velocity_dz / rtp_zp_tal;\r\n\r\n  /* Sum: '<S2>/Sum2' */\r\n  *rty_ground_truth_acceleration_o = NumLinearModel_B.Divide2 -\r\n    NumLinearModel_B.Divide3;\r\n\r\n  /* Sum: '<S2>/Sum4' incorporates:\r\n   *  Constant: '<S2>/Constant3'\r\n   */\r\n  NumLinearModel_B.Sum4 = rtp_gravity + *rty_ground_truth_acceleration_o;\r\n\r\n  /* Product: '<S2>/Product6' */\r\n  NumLinearModel_B.Product6 = NumLinearModel_B.Cos2_o2 *\r\n    NumLinearModel_B.Cos3_o2;\r\n\r\n  /* Product: '<S2>/Divide4' incorporates:\r\n   *  Constant: '<S2>/Constant2'\r\n   */\r\n  NumLinearModel_B.Divide4 = NumLinearModel_B.Sum4 * rtp_mass /\r\n    NumLinearModel_B.Product6;\r\n\r\n  /* Product: '<S2>/Divide5' incorporates:\r\n   *  Constant: '<S2>/Constant4'\r\n   *  Product: '<S2>/Divide6'\r\n   */\r\n  cosOut = NumLinearModel_B.Divide4 / rtp_mass;\r\n\r\n  /* Product: '<S2>/Divide5' */\r\n  NumLinearModel_B.Divide5 = cosOut;\r\n\r\n  /* Product: '<S2>/Divide6' */\r\n  NumLinearModel_B.Divide6 = cosOut;\r\n\r\n  /* DiscreteIntegrator: '<S2>/Integrator' */\r\n  *rty_ground_truth_velocity_droll = NumLinearModel_DW.Integrator_DSTATE;\r\n\r\n  /* DiscreteIntegrator: '<S2>/Integrator10' */\r\n  *rty_ground_truth_velocity_dy = NumLinearModel_DW.Integrator10_DSTATE;\r\n\r\n  /* DiscreteIntegrator: '<S2>/Integrator11' */\r\n  *rty_ground_truth_pose_y = NumLinearModel_DW.Integrator11_DSTATE;\r\n\r\n  /* DiscreteIntegrator: '<S2>/Integrator2' */\r\n  *rty_ground_truth_velocity_dpitc = NumLinearModel_DW.Integrator2_DSTATE;\r\n\r\n  /* DiscreteIntegrator: '<S2>/Integrator7' */\r\n  *rty_ground_truth_pose_z = NumLinearModel_DW.Integrator7_DSTATE;\r\n\r\n  /* DiscreteIntegrator: '<S2>/Integrator8' */\r\n  *rty_ground_truth_velocity_dx = NumLinearModel_DW.Integrator8_DSTATE;\r\n\r\n  /* DiscreteIntegrator: '<S2>/Integrator9' */\r\n  *rty_ground_truth_pose_x = NumLinearModel_DW.Integrator9_DSTATE;\r\n\r\n  /* Product: '<S2>/Product1' incorporates:\r\n   *  Constant: '<S2>/Constant'\r\n   *  Constant: '<S3>/Constant1'\r\n   *  Constant: '<S3>/Constant3'\r\n   */\r\n  NumLinearModel_B.Product1 = rtp_phi_zeta * rtp_phi_omega *\r\n    NumLinearModel_rtP.Constant_Value * *rty_ground_truth_velocity_droll;\r\n\r\n  /* Product: '<S2>/Product10' incorporates:\r\n   *  Constant: '<S3>/Constant14'\r\n   */\r\n  NumLinearModel_B.Product10 = *rty_ground_truth_velocity_dx * rtp_Cx;\r\n\r\n  /* Product: '<S2>/Product11' incorporates:\r\n   *  Constant: '<S3>/Constant15'\r\n   */\r\n  NumLinearModel_B.Product11 = *rty_ground_truth_velocity_dy * rtp_Cy;\r\n\r\n  /* Product: '<S2>/Product12' */\r\n  NumLinearModel_B.Product12 = NumLinearModel_B.Cos4_o2 *\r\n    NumLinearModel_B.Cos2_o1;\r\n\r\n  /* Product: '<S2>/Product13' */\r\n  NumLinearModel_B.Product13 = NumLinearModel_B.Cos4_o1 *\r\n    NumLinearModel_B.Cos2_o2 * NumLinearModel_B.Cos3_o1;\r\n\r\n  /* Sum: '<S2>/Sum7' */\r\n  NumLinearModel_B.Sum7 = NumLinearModel_B.Product13 -\r\n    NumLinearModel_B.Product12;\r\n\r\n  /* Product: '<S2>/Product14' */\r\n  NumLinearModel_B.Product14 = NumLinearModel_B.Divide6 * NumLinearModel_B.Sum7;\r\n\r\n  /* Product: '<S2>/Product2' incorporates:\r\n   *  Constant: '<S3>/Constant1'\r\n   */\r\n  NumLinearModel_B.Product2 = rtp_phi_omega * rtp_phi_omega *\r\n    *rty_ground_truth_pose_roll;\r\n\r\n  /* Product: '<S2>/Product4' incorporates:\r\n   *  Constant: '<S2>/Constant1'\r\n   *  Constant: '<S3>/Constant5'\r\n   *  Constant: '<S3>/Constant7'\r\n   */\r\n  NumLinearModel_B.Product4 = rtp_theta_zeta * rtp_theta_omega *\r\n    NumLinearModel_rtP.Constant1_Value * *rty_ground_truth_velocity_dpitc;\r\n\r\n  /* Product: '<S2>/Product5' incorporates:\r\n   *  Constant: '<S3>/Constant5'\r\n   */\r\n  NumLinearModel_B.Product5 = rtp_theta_omega * rtp_theta_omega *\r\n    *rty_ground_truth_pose_pitch;\r\n\r\n  /* Product: '<S2>/Product7' */\r\n  NumLinearModel_B.Product7 = NumLinearModel_B.Cos4_o1 *\r\n    NumLinearModel_B.Cos2_o1;\r\n\r\n  /* Product: '<S2>/Product8' */\r\n  NumLinearModel_B.Product8 = NumLinearModel_B.Cos4_o2 *\r\n    NumLinearModel_B.Cos2_o2 * NumLinearModel_B.Cos3_o1;\r\n\r\n  /* Sum: '<S2>/Sum5' */\r\n  NumLinearModel_B.Sum5 = NumLinearModel_B.Product7 + NumLinearModel_B.Product8;\r\n\r\n  /* Product: '<S2>/Product9' */\r\n  NumLinearModel_B.Product9 = NumLinearModel_B.Divide5 * NumLinearModel_B.Sum5;\r\n\r\n  /* Sum: '<S2>/Sum' */\r\n  NumLinearModel_B.phi2p_radps2 = (NumLinearModel_B.Product -\r\n    NumLinearModel_B.Product1) - NumLinearModel_B.Product2;\r\n\r\n  /* Sum: '<S2>/Sum1' */\r\n  NumLinearModel_B.theta2p_radps2 = (NumLinearModel_B.Product3 -\r\n    NumLinearModel_B.Product4) - NumLinearModel_B.Product5;\r\n\r\n  /* Sum: '<S2>/Sum3' */\r\n  NumLinearModel_B.yaw2p_radps2 = NumLinearModel_B.Divide -\r\n    NumLinearModel_B.Divide1;\r\n\r\n  /* Sum: '<S2>/Sum6' */\r\n  *rty_ground_truth_acceleration_d = NumLinearModel_B.Product9 -\r\n    NumLinearModel_B.Product10;\r\n\r\n  /* Sum: '<S2>/Sum8' */\r\n  *rty_ground_truth_acceleration_e = NumLinearModel_B.Product14 -\r\n    NumLinearModel_B.Product11;\r\n\r\n  /* Update for DiscreteIntegrator: '<S2>/Integrator1' */\r\n  NumLinearModel_DW.Integrator1_DSTATE += NumLinearModel_rtP.Integrator1_gainval\r\n    * *rty_ground_truth_velocity_droll;\r\n\r\n  /* Update for DiscreteIntegrator: '<S2>/Integrator3' */\r\n  NumLinearModel_DW.Integrator3_DSTATE += NumLinearModel_rtP.Integrator3_gainval\r\n    * *rty_ground_truth_velocity_dpitc;\r\n\r\n  /* Update for DiscreteIntegrator: '<S2>/Integrator5' */\r\n  NumLinearModel_DW.Integrator5_DSTATE += NumLinearModel_rtP.Integrator5_gainval\r\n    * *rty_ground_truth_velocity_dyaw;\r\n\r\n  /* Update for DiscreteIntegrator: '<S2>/Integrator4' */\r\n  NumLinearModel_DW.Integrator4_DSTATE += NumLinearModel_rtP.Integrator4_gainval\r\n    * NumLinearModel_B.yaw2p_radps2;\r\n\r\n  /* Update for DiscreteIntegrator: '<S2>/Integrator6' */\r\n  NumLinearModel_DW.Integrator6_DSTATE += NumLinearModel_rtP.Integrator6_gainval\r\n    * *rty_ground_truth_acceleration_o;\r\n\r\n  /* Update for DiscreteIntegrator: '<S2>/Integrator' */\r\n  NumLinearModel_DW.Integrator_DSTATE += NumLinearModel_rtP.Integrator_gainval *\r\n    NumLinearModel_B.phi2p_radps2;\r\n\r\n  /* Update for DiscreteIntegrator: '<S2>/Integrator10' */\r\n  NumLinearModel_DW.Integrator10_DSTATE +=\r\n    NumLinearModel_rtP.Integrator10_gainval * *rty_ground_truth_acceleration_e;\r\n\r\n  /* Update for DiscreteIntegrator: '<S2>/Integrator11' */\r\n  NumLinearModel_DW.Integrator11_DSTATE +=\r\n    NumLinearModel_rtP.Integrator11_gainval * *rty_ground_truth_velocity_dy;\r\n\r\n  /* Update for DiscreteIntegrator: '<S2>/Integrator2' */\r\n  NumLinearModel_DW.Integrator2_DSTATE += NumLinearModel_rtP.Integrator2_gainval\r\n    * NumLinearModel_B.theta2p_radps2;\r\n\r\n  /* Update for DiscreteIntegrator: '<S2>/Integrator7' */\r\n  NumLinearModel_DW.Integrator7_DSTATE += NumLinearModel_rtP.Integrator7_gainval\r\n    * *rty_ground_truth_velocity_dz;\r\n\r\n  /* Update for DiscreteIntegrator: '<S2>/Integrator8' */\r\n  NumLinearModel_DW.Integrator8_DSTATE += NumLinearModel_rtP.Integrator8_gainval\r\n    * *rty_ground_truth_acceleration_d;\r\n\r\n  /* Update for DiscreteIntegrator: '<S2>/Integrator9' */\r\n  NumLinearModel_DW.Integrator9_DSTATE += NumLinearModel_rtP.Integrator9_gainval\r\n    * *rty_ground_truth_velocity_dx;\r\n}\r\n\r\n/* Constructor */\r\nNumLinearModel::NumLinearModel() :\r\n  NumLinearModel_B(),\r\n  NumLinearModel_DW(),\r\n  NumLinearModel_M()\r\n{\r\n  /* Currently there is no constructor body generated.*/\r\n}\r\n\r\n/* Destructor */\r\n/* Currently there is no destructor body generated.*/\r\nNumLinearModel::~NumLinearModel() = default;\r\n\r\n/* Real-Time Model get method */\r\nRT_MODEL_NumLinearModel_T * NumLinearModel::getRTM()\r\n{\r\n  return (&NumLinearModel_M);\r\n}\r\n\r\n/* member function to initialize Real-Time model */\r\nvoid NumLinearModel::initializeRTM(const rtTimingBridge *timingBridge, int_T\r\n  mdlref_TID0, int_T mdlref_TID1)\r\n{\r\n  setupGlobalTimingEngine(timingBridge, mdlref_TID0, mdlref_TID1);\r\n}\r\n\r\n/* Private member function to set up the global timing engine */\r\nvoid NumLinearModel::setupGlobalTimingEngine(const rtTimingBridge *timingBridge,\r\n  int_T mdlref_TID0, int_T mdlref_TID1)\r\n{\r\n  (&NumLinearModel_M)->Timing.mdlref_GlobalTID[0] = mdlref_TID0;\r\n  (&NumLinearModel_M)->Timing.mdlref_GlobalTID[1] = mdlref_TID1;\r\n  (&NumLinearModel_M)->timingBridge = timingBridge;\r\n}\r\n\r\n/* member function to setup error status pointer */\r\nvoid NumLinearModel::setErrorStatusPointer(const char_T **rt_errorStatus)\r\n{\r\n  rtmSetErrorStatusPointer((&NumLinearModel_M), rt_errorStatus);\r\n}\r\n"},{"name":"NumLinearModel.h","type":"header","group":"model","path":"C:\\Users\\Gabriel Fernandes\\Desktop\\Tello\\slprj\\grt\\NumLinearModel","tag":"","groupDisplay":"Model files","code":"/*\r\n * Code generation for system model 'NumLinearModel'\r\n * For more details, see corresponding source file NumLinearModel.c\r\n *\r\n */\r\n\r\n#ifndef NumLinearModel_h_\r\n#define NumLinearModel_h_\r\n#include <cmath>\r\n#include \"rtwtypes.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n#include \"rt_nonfinite.h\"\r\n#include \"NumLinearModel_types.h\"\r\n#include \"model_reference_types.h\"\r\n#include <cstring>\r\n\r\n/* Block signals for model 'NumLinearModel' */\r\nstruct B_NumLinearModel_T {\r\n  real_T Cos2_o1;                      /* '<S2>/Cos2' */\r\n  real_T Cos2_o2;                      /* '<S2>/Cos2' */\r\n  real_T Cos3_o1;                      /* '<S2>/Cos3' */\r\n  real_T Cos3_o2;                      /* '<S2>/Cos3' */\r\n  real_T Cos4_o1;                      /* '<S2>/Cos4' */\r\n  real_T Cos4_o2;                      /* '<S2>/Cos4' */\r\n  real_T Divide;                       /* '<S2>/Divide' */\r\n  real_T Divide1;                      /* '<S2>/Divide1' */\r\n  real_T Divide2;                      /* '<S2>/Divide2' */\r\n  real_T Divide3;                      /* '<S2>/Divide3' */\r\n  real_T Sum4;                         /* '<S2>/Sum4' */\r\n  real_T Product6;                     /* '<S2>/Product6' */\r\n  real_T Divide4;                      /* '<S2>/Divide4' */\r\n  real_T Divide5;                      /* '<S2>/Divide5' */\r\n  real_T Divide6;                      /* '<S2>/Divide6' */\r\n  real_T Product;                      /* '<S2>/Product' */\r\n  real_T Product1;                     /* '<S2>/Product1' */\r\n  real_T Product10;                    /* '<S2>/Product10' */\r\n  real_T Product11;                    /* '<S2>/Product11' */\r\n  real_T Product12;                    /* '<S2>/Product12' */\r\n  real_T Product13;                    /* '<S2>/Product13' */\r\n  real_T Sum7;                         /* '<S2>/Sum7' */\r\n  real_T Product14;                    /* '<S2>/Product14' */\r\n  real_T Product2;                     /* '<S2>/Product2' */\r\n  real_T Product3;                     /* '<S2>/Product3' */\r\n  real_T Product4;                     /* '<S2>/Product4' */\r\n  real_T Product5;                     /* '<S2>/Product5' */\r\n  real_T Product7;                     /* '<S2>/Product7' */\r\n  real_T Product8;                     /* '<S2>/Product8' */\r\n  real_T Sum5;                         /* '<S2>/Sum5' */\r\n  real_T Product9;                     /* '<S2>/Product9' */\r\n  real_T phi2p_radps2;                 /* '<S2>/Sum' */\r\n  real_T theta2p_radps2;               /* '<S2>/Sum1' */\r\n  real_T yaw2p_radps2;                 /* '<S2>/Sum3' */\r\n  real_T uphi;                         /* '<S1>/Delay' */\r\n  real_T utheta;                       /* '<S1>/Delay1' */\r\n  real_T uzp;                          /* '<S1>/Delay2' */\r\n  real_T uyaw;                         /* '<S1>/Delay3' */\r\n};\r\n\r\n/* Block states (default storage) for model 'NumLinearModel' */\r\nstruct DW_NumLinearModel_T {\r\n  real_T Integrator1_DSTATE;           /* '<S2>/Integrator1' */\r\n  real_T Integrator3_DSTATE;           /* '<S2>/Integrator3' */\r\n  real_T Integrator5_DSTATE;           /* '<S2>/Integrator5' */\r\n  real_T Integrator4_DSTATE;           /* '<S2>/Integrator4' */\r\n  real_T Integrator6_DSTATE;           /* '<S2>/Integrator6' */\r\n  real_T Integrator_DSTATE;            /* '<S2>/Integrator' */\r\n  real_T Integrator10_DSTATE;          /* '<S2>/Integrator10' */\r\n  real_T Integrator11_DSTATE;          /* '<S2>/Integrator11' */\r\n  real_T Integrator2_DSTATE;           /* '<S2>/Integrator2' */\r\n  real_T Integrator7_DSTATE;           /* '<S2>/Integrator7' */\r\n  real_T Integrator8_DSTATE;           /* '<S2>/Integrator8' */\r\n  real_T Integrator9_DSTATE;           /* '<S2>/Integrator9' */\r\n  real_T Delay_DSTATE;                 /* '<S1>/Delay' */\r\n  real_T Delay1_DSTATE;                /* '<S1>/Delay1' */\r\n  real_T Delay2_DSTATE;                /* '<S1>/Delay2' */\r\n  real_T Delay3_DSTATE;                /* '<S1>/Delay3' */\r\n  boolean_T InputDelay_MODE;           /* '<Root>/InputDelay' */\r\n};\r\n\r\n/* Parameters (default storage) */\r\nstruct P_NumLinearModel_T_ {\r\n  struct_ntCcZA6dmYQlhHRgczZZUG u_control_out_Y0;/* Computed Parameter: u_control_out_Y0\r\n                                                  * Referenced by: '<S1>/u_control_out'\r\n                                                  */\r\n  real_T Delay_InitialCondition;       /* Expression: 0.0\r\n                                        * Referenced by: '<S1>/Delay'\r\n                                        */\r\n  real_T Delay1_InitialCondition;      /* Expression: 0.0\r\n                                        * Referenced by: '<S1>/Delay1'\r\n                                        */\r\n  real_T Delay2_InitialCondition;      /* Expression: 0.0\r\n                                        * Referenced by: '<S1>/Delay2'\r\n                                        */\r\n  real_T Delay3_InitialCondition;      /* Expression: 0.0\r\n                                        * Referenced by: '<S1>/Delay3'\r\n                                        */\r\n  real_T Constant_Value;               /* Expression: 2\r\n                                        * Referenced by: '<S2>/Constant'\r\n                                        */\r\n  real_T Constant1_Value;              /* Expression: 2\r\n                                        * Referenced by: '<S2>/Constant1'\r\n                                        */\r\n  real_T Integrator1_gainval;         /* Computed Parameter: Integrator1_gainval\r\n                                       * Referenced by: '<S2>/Integrator1'\r\n                                       */\r\n  real_T Integrator1_IC;               /* Expression: 0\r\n                                        * Referenced by: '<S2>/Integrator1'\r\n                                        */\r\n  real_T Integrator3_gainval;         /* Computed Parameter: Integrator3_gainval\r\n                                       * Referenced by: '<S2>/Integrator3'\r\n                                       */\r\n  real_T Integrator3_IC;               /* Expression: 0\r\n                                        * Referenced by: '<S2>/Integrator3'\r\n                                        */\r\n  real_T Integrator5_gainval;         /* Computed Parameter: Integrator5_gainval\r\n                                       * Referenced by: '<S2>/Integrator5'\r\n                                       */\r\n  real_T Integrator5_IC;               /* Expression: 0\r\n                                        * Referenced by: '<S2>/Integrator5'\r\n                                        */\r\n  real_T Integrator4_gainval;         /* Computed Parameter: Integrator4_gainval\r\n                                       * Referenced by: '<S2>/Integrator4'\r\n                                       */\r\n  real_T Integrator4_IC;               /* Expression: 0\r\n                                        * Referenced by: '<S2>/Integrator4'\r\n                                        */\r\n  real_T Integrator6_gainval;         /* Computed Parameter: Integrator6_gainval\r\n                                       * Referenced by: '<S2>/Integrator6'\r\n                                       */\r\n  real_T Integrator6_IC;               /* Expression: 0\r\n                                        * Referenced by: '<S2>/Integrator6'\r\n                                        */\r\n  real_T Integrator_gainval;           /* Computed Parameter: Integrator_gainval\r\n                                        * Referenced by: '<S2>/Integrator'\r\n                                        */\r\n  real_T Integrator_IC;                /* Expression: 0\r\n                                        * Referenced by: '<S2>/Integrator'\r\n                                        */\r\n  real_T Integrator10_gainval;       /* Computed Parameter: Integrator10_gainval\r\n                                      * Referenced by: '<S2>/Integrator10'\r\n                                      */\r\n  real_T Integrator10_IC;              /* Expression: 0\r\n                                        * Referenced by: '<S2>/Integrator10'\r\n                                        */\r\n  real_T Integrator11_gainval;       /* Computed Parameter: Integrator11_gainval\r\n                                      * Referenced by: '<S2>/Integrator11'\r\n                                      */\r\n  real_T Integrator11_IC;              /* Expression: 0\r\n                                        * Referenced by: '<S2>/Integrator11'\r\n                                        */\r\n  real_T Integrator2_gainval;         /* Computed Parameter: Integrator2_gainval\r\n                                       * Referenced by: '<S2>/Integrator2'\r\n                                       */\r\n  real_T Integrator2_IC;               /* Expression: 0\r\n                                        * Referenced by: '<S2>/Integrator2'\r\n                                        */\r\n  real_T Integrator7_gainval;         /* Computed Parameter: Integrator7_gainval\r\n                                       * Referenced by: '<S2>/Integrator7'\r\n                                       */\r\n  real_T Integrator7_IC;               /* Expression: 0\r\n                                        * Referenced by: '<S2>/Integrator7'\r\n                                        */\r\n  real_T Integrator8_gainval;         /* Computed Parameter: Integrator8_gainval\r\n                                       * Referenced by: '<S2>/Integrator8'\r\n                                       */\r\n  real_T Integrator8_IC;               /* Expression: 0\r\n                                        * Referenced by: '<S2>/Integrator8'\r\n                                        */\r\n  real_T Integrator9_gainval;         /* Computed Parameter: Integrator9_gainval\r\n                                       * Referenced by: '<S2>/Integrator9'\r\n                                       */\r\n  real_T Integrator9_IC;               /* Expression: 0\r\n                                        * Referenced by: '<S2>/Integrator9'\r\n                                        */\r\n};\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_NumLinearModel_T {\r\n  const char_T **errorStatus;\r\n  const rtTimingBridge *timingBridge;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    int_T mdlref_GlobalTID[2];\r\n  } Timing;\r\n};\r\n\r\nextern P_NumLinearModel_T NumLinearModel_rtP;\r\n\r\n/* Class declaration for model NumLinearModel */\r\nclass NumLinearModel final\r\n{\r\n  /* public data and function members */\r\n public:\r\n  /* Initial conditions function */\r\n  void init();\r\n\r\n  /* Copy Constructor */\r\n  NumLinearModel(NumLinearModel const&) = delete;\r\n\r\n  /* Assignment Operator */\r\n  NumLinearModel& operator= (NumLinearModel const&) & = delete;\r\n\r\n  /* Move Constructor */\r\n  NumLinearModel(NumLinearModel &&) = delete;\r\n\r\n  /* Move Assignment Operator */\r\n  NumLinearModel& operator= (NumLinearModel &&) = delete;\r\n\r\n  /* Real-Time Model get method */\r\n  RT_MODEL_NumLinearModel_T * getRTM();\r\n\r\n  /* member function to initialize Real-Time model */\r\n  void initializeRTM(const rtTimingBridge *timingBridge, int_T mdlref_TID0,\r\n                     int_T mdlref_TID1);\r\n\r\n  /*member function to setup error status pointer */\r\n  void setErrorStatusPointer(const char_T **rt_errorStatus);\r\n\r\n  /* model step function */\r\n  void step(const real_T *rtu_uphi, const real_T *rtu_utheta, const real_T\r\n            *rtu_uzp, const real_T *rtu_uyaw, real_T *rty_ground_truth_pose_x,\r\n            real_T *rty_ground_truth_pose_y, real_T *rty_ground_truth_pose_z,\r\n            real_T *rty_ground_truth_pose_roll, real_T\r\n            *rty_ground_truth_pose_pitch, real_T *rty_ground_truth_pose_yaw,\r\n            real_T *rty_ground_truth_velocity_dx, real_T\r\n            *rty_ground_truth_velocity_dy, real_T *rty_ground_truth_velocity_dz,\r\n            real_T *rty_ground_truth_velocity_droll, real_T\r\n            *rty_ground_truth_velocity_dpitc, real_T\r\n            *rty_ground_truth_velocity_dyaw, real_T\r\n            *rty_ground_truth_acceleration_d, real_T\r\n            *rty_ground_truth_acceleration_e, real_T\r\n            *rty_ground_truth_acceleration_o, real_T rtp_Cx, real_T rtp_Cy,\r\n            boolean_T rtp_enable_input_delay, real_T rtp_gravity, real_T\r\n            rtp_mass, real_T rtp_phi_K, real_T rtp_phi_max, real_T rtp_phi_omega,\r\n            real_T rtp_phi_zeta, real_T rtp_theta_K, real_T rtp_theta_max,\r\n            real_T rtp_theta_omega, real_T rtp_theta_zeta, real_T rtp_yawp_K,\r\n            real_T rtp_yawp_max, real_T rtp_yawp_tal, real_T rtp_zp_K, real_T\r\n            rtp_zp_max, real_T rtp_zp_tal);\r\n\r\n  /* Reset function */\r\n  void reset();\r\n\r\n  /* model disable function */\r\n  void disable();\r\n\r\n  /* Constructor */\r\n  NumLinearModel();\r\n\r\n  /* Destructor */\r\n  ~NumLinearModel();\r\n\r\n  /* private data and function members */\r\n private:\r\n  /* Block signals */\r\n  B_NumLinearModel_T NumLinearModel_B;\r\n\r\n  /* Block states */\r\n  DW_NumLinearModel_T NumLinearModel_DW;\r\n\r\n  /* Tunable parameters */\r\n  static P_NumLinearModel_T NumLinearModel_rtP;\r\n\r\n  /* Private member function to set up the global timing engine */\r\n  void setupGlobalTimingEngine(const rtTimingBridge *timingBridge, int_T\r\n    mdlref_TID0, int_T mdlref_TID1);\r\n\r\n  /* Real-Time Model */\r\n  RT_MODEL_NumLinearModel_T NumLinearModel_M;\r\n};\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'NumLinearModel'\r\n * '<S1>'   : 'NumLinearModel/InputDelay'\r\n * '<S2>'   : 'NumLinearModel/NonLinearDynamics'\r\n * '<S3>'   : 'NumLinearModel/Parameters'\r\n */\r\n#endif                                 /* NumLinearModel_h_ */\r\n"},{"name":"NumLinearModel_private.h","type":"header","group":"model","path":"C:\\Users\\Gabriel Fernandes\\Desktop\\Tello\\slprj\\grt\\NumLinearModel","tag":"","groupDisplay":"Model files","code":"/*\r\n * NumLinearModel_private.h\r\n *\r\n * Sponsored License - for use in support of a program or activity\r\n * sponsored by MathWorks.  Not for government, commercial or other\r\n * non-sponsored organizational use.\r\n *\r\n * Code generation for model \"NumLinearModel\".\r\n *\r\n * Model version              : 6.27\r\n * Simulink Coder version : 25.1 (R2025a) 21-Nov-2024\r\n * C++ source code generated on : Fri May 30 20:24:35 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef NumLinearModel_private_h_\r\n#define NumLinearModel_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"model_reference_types.h\"\r\n#include \"multiword_types.h\"\r\n#include \"NumLinearModel_types.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n\r\n/* Private macros used by the generated code to access rtModel */\r\n#ifndef rtmIsSampleHit\r\n#define rtmIsSampleHit(rtm, sti)       ((rtm)->timingBridge->taskCounter[(rtm)->Timing.mdlref_GlobalTID[sti]] == 0)\r\n#endif\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetClockTick0\r\n#define rtmGetClockTick0(rtm)          ( *(((rtm)->timingBridge->clockTick[(rtm)->Timing.mdlref_GlobalTID[0]])) )\r\n#endif\r\n\r\n#ifndef rtmGetClockTick1\r\n#define rtmGetClockTick1(rtm)          ( *(((rtm)->timingBridge->clockTick[(rtm)->Timing.mdlref_GlobalTID[1]])) )\r\n#endif\r\n\r\n#ifndef rtmGetClockTickH0\r\n#define rtmGetClockTickH0(rtm)         ( *((rtm)->timingBridge->clockTickH[(rtm)->Timing.mdlref_GlobalTID[0]]) )\r\n#endif\r\n\r\n#ifndef rtmGetClockTickH1\r\n#define rtmGetClockTickH1(rtm)         ( *((rtm)->timingBridge->clockTickH[(rtm)->Timing.mdlref_GlobalTID[1]]) )\r\n#endif\r\n\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         (*((rtm)->errorStatus))\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    (*((rtm)->errorStatus) = (val))\r\n#endif\r\n\r\n#ifndef rtmGetErrorStatusPointer\r\n#define rtmGetErrorStatusPointer(rtm)  (rtm)->errorStatus\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatusPointer\r\n#define rtmSetErrorStatusPointer(rtm, val) ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n#ifndef rtmGetT\r\n#define rtmGetT(rtm)                   (*((rtm)->timingBridge->taskTime[0]))\r\n#endif\r\n#endif                                 /* NumLinearModel_private_h_ */\r\n"},{"name":"NumLinearModel_types.h","type":"header","group":"model","path":"C:\\Users\\Gabriel Fernandes\\Desktop\\Tello\\slprj\\grt\\NumLinearModel","tag":"","groupDisplay":"Model files","code":"/*\r\n * NumLinearModel_types.h\r\n *\r\n * Sponsored License - for use in support of a program or activity\r\n * sponsored by MathWorks.  Not for government, commercial or other\r\n * non-sponsored organizational use.\r\n *\r\n * Code generation for model \"NumLinearModel\".\r\n *\r\n * Model version              : 6.27\r\n * Simulink Coder version : 25.1 (R2025a) 21-Nov-2024\r\n * C++ source code generated on : Fri May 30 20:24:35 2025\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Debugging\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef NumLinearModel_types_h_\r\n#define NumLinearModel_types_h_\r\n#include \"rtwtypes.h\"\r\n#ifndef DEFINED_TYPEDEF_FOR_struct_ntCcZA6dmYQlhHRgczZZUG_\r\n#define DEFINED_TYPEDEF_FOR_struct_ntCcZA6dmYQlhHRgczZZUG_\r\n\r\nstruct struct_ntCcZA6dmYQlhHRgczZZUG\r\n{\r\n  real_T uphi;\r\n  real_T utheta;\r\n  real_T uzp;\r\n  real_T uyaw;\r\n};\r\n\r\n#endif\r\n\r\n/* Parameters (default storage) */\r\ntypedef struct P_NumLinearModel_T_ P_NumLinearModel_T;\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_NumLinearModel_T RT_MODEL_NumLinearModel_T;\r\n\r\n#endif                                 /* NumLinearModel_types_h_ */\r\n"},{"name":"model_reference_types.h","type":"header","group":"sharedutility","path":"C:\\Users\\Gabriel Fernandes\\Desktop\\Tello\\slprj\\grt\\_sharedutils","tag":"","groupDisplay":"Shared files","code":"/*\r\n * model_reference_types.h\r\n *\r\n * Sponsored License - for use in support of a program or activity\r\n * sponsored by MathWorks.  Not for government, commercial or other\r\n * non-sponsored organizational use.\r\n *\r\n * Code generation for model \"NumLinearModel\".\r\n *\r\n * Model version              : 6.27\r\n * Simulink Coder version : 25.1 (R2025a) 21-Nov-2024\r\n * C++ source code generated on : Fri May 30 20:21:36 2025\r\n */\r\n\r\n#ifndef MODEL_REFERENCE_TYPES_H\r\n#define MODEL_REFERENCE_TYPES_H\r\n#include \"rtwtypes.h\"\r\n#ifndef MODEL_REFERENCE_TYPES\r\n#define MODEL_REFERENCE_TYPES\r\n\r\n/*===========================================================================*\r\n * Model reference type definitions                                          *\r\n *===========================================================================*/\r\n/*\r\n * This structure is used by model reference to\r\n * communicate timing information through the hierarchy.\r\n */\r\ntypedef struct _rtTimingBridge_tag rtTimingBridge;\r\nstruct _rtTimingBridge_tag {\r\n  uint32_T nTasks;\r\n  uint32_T** clockTick;\r\n  uint32_T** clockTickH;\r\n  uint32_T* taskCounter;\r\n  real_T** taskTime;\r\n  boolean_T** rateTransition;\r\n  boolean_T *firstInitCond;\r\n};\r\n\r\n/*\r\n * This structure is used by model reference to\r\n * communicate variable discrete rate timing information through the hierarchy.\r\n */\r\ntypedef struct _rtCtrlRateMdlRefTiming_tag rtCtrlRateMdlRefTiming;\r\nstruct _rtCtrlRateMdlRefTiming_tag {\r\n  uint32_T firstCtrlRateTID;\r\n  uint32_T* numTicksToNextHitForCtrlRate;\r\n};\r\n\r\n#endif                                 /* MODEL_REFERENCE_TYPES */\r\n#endif                                 /* MODEL_REFERENCE_TYPES_H */\r\n"},{"name":"multiword_types.h","type":"header","group":"sharedutility","path":"C:\\Users\\Gabriel Fernandes\\Desktop\\Tello\\slprj\\grt\\_sharedutils","tag":"","groupDisplay":"Shared files","code":"/*\r\n * multiword_types.h\r\n *\r\n * Sponsored License - for use in support of a program or activity\r\n * sponsored by MathWorks.  Not for government, commercial or other\r\n * non-sponsored organizational use.\r\n *\r\n * Code generation for model \"drone_wrapper\".\r\n *\r\n * Model version              : 6.4\r\n * Simulink Coder version : 25.1 (R2025a) 21-Nov-2024\r\n * C++ source code generated on : Fri May 30 20:21:43 2025\r\n */\r\n\r\n#ifndef MULTIWORD_TYPES_H\r\n#define MULTIWORD_TYPES_H\r\n#include \"rtwtypes.h\"\r\n\r\n/*\r\n * Definitions supporting external data access\r\n */\r\ntypedef int32_T chunk_T;\r\ntypedef uint32_T uchunk_T;\r\n\r\n/*\r\n * MultiWord supporting definitions\r\n */\r\ntypedef long int long_T;\r\n\r\n/*\r\n * MultiWord types\r\n */\r\ntypedef struct {\r\n  uint32_T chunks[2];\r\n} int64m_T;\r\n\r\ntypedef struct {\r\n  int64m_T re;\r\n  int64m_T im;\r\n} cint64m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[2];\r\n} uint64m_T;\r\n\r\ntypedef struct {\r\n  uint64m_T re;\r\n  uint64m_T im;\r\n} cuint64m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[3];\r\n} int96m_T;\r\n\r\ntypedef struct {\r\n  int96m_T re;\r\n  int96m_T im;\r\n} cint96m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[3];\r\n} uint96m_T;\r\n\r\ntypedef struct {\r\n  uint96m_T re;\r\n  uint96m_T im;\r\n} cuint96m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[4];\r\n} int128m_T;\r\n\r\ntypedef struct {\r\n  int128m_T re;\r\n  int128m_T im;\r\n} cint128m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[4];\r\n} uint128m_T;\r\n\r\ntypedef struct {\r\n  uint128m_T re;\r\n  uint128m_T im;\r\n} cuint128m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[5];\r\n} int160m_T;\r\n\r\ntypedef struct {\r\n  int160m_T re;\r\n  int160m_T im;\r\n} cint160m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[5];\r\n} uint160m_T;\r\n\r\ntypedef struct {\r\n  uint160m_T re;\r\n  uint160m_T im;\r\n} cuint160m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[6];\r\n} int192m_T;\r\n\r\ntypedef struct {\r\n  int192m_T re;\r\n  int192m_T im;\r\n} cint192m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[6];\r\n} uint192m_T;\r\n\r\ntypedef struct {\r\n  uint192m_T re;\r\n  uint192m_T im;\r\n} cuint192m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[7];\r\n} int224m_T;\r\n\r\ntypedef struct {\r\n  int224m_T re;\r\n  int224m_T im;\r\n} cint224m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[7];\r\n} uint224m_T;\r\n\r\ntypedef struct {\r\n  uint224m_T re;\r\n  uint224m_T im;\r\n} cuint224m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[8];\r\n} int256m_T;\r\n\r\ntypedef struct {\r\n  int256m_T re;\r\n  int256m_T im;\r\n} cint256m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[8];\r\n} uint256m_T;\r\n\r\ntypedef struct {\r\n  uint256m_T re;\r\n  uint256m_T im;\r\n} cuint256m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[9];\r\n} int288m_T;\r\n\r\ntypedef struct {\r\n  int288m_T re;\r\n  int288m_T im;\r\n} cint288m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[9];\r\n} uint288m_T;\r\n\r\ntypedef struct {\r\n  uint288m_T re;\r\n  uint288m_T im;\r\n} cuint288m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[10];\r\n} int320m_T;\r\n\r\ntypedef struct {\r\n  int320m_T re;\r\n  int320m_T im;\r\n} cint320m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[10];\r\n} uint320m_T;\r\n\r\ntypedef struct {\r\n  uint320m_T re;\r\n  uint320m_T im;\r\n} cuint320m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[11];\r\n} int352m_T;\r\n\r\ntypedef struct {\r\n  int352m_T re;\r\n  int352m_T im;\r\n} cint352m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[11];\r\n} uint352m_T;\r\n\r\ntypedef struct {\r\n  uint352m_T re;\r\n  uint352m_T im;\r\n} cuint352m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[12];\r\n} int384m_T;\r\n\r\ntypedef struct {\r\n  int384m_T re;\r\n  int384m_T im;\r\n} cint384m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[12];\r\n} uint384m_T;\r\n\r\ntypedef struct {\r\n  uint384m_T re;\r\n  uint384m_T im;\r\n} cuint384m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[13];\r\n} int416m_T;\r\n\r\ntypedef struct {\r\n  int416m_T re;\r\n  int416m_T im;\r\n} cint416m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[13];\r\n} uint416m_T;\r\n\r\ntypedef struct {\r\n  uint416m_T re;\r\n  uint416m_T im;\r\n} cuint416m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[14];\r\n} int448m_T;\r\n\r\ntypedef struct {\r\n  int448m_T re;\r\n  int448m_T im;\r\n} cint448m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[14];\r\n} uint448m_T;\r\n\r\ntypedef struct {\r\n  uint448m_T re;\r\n  uint448m_T im;\r\n} cuint448m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[15];\r\n} int480m_T;\r\n\r\ntypedef struct {\r\n  int480m_T re;\r\n  int480m_T im;\r\n} cint480m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[15];\r\n} uint480m_T;\r\n\r\ntypedef struct {\r\n  uint480m_T re;\r\n  uint480m_T im;\r\n} cuint480m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[16];\r\n} int512m_T;\r\n\r\ntypedef struct {\r\n  int512m_T re;\r\n  int512m_T im;\r\n} cint512m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[16];\r\n} uint512m_T;\r\n\r\ntypedef struct {\r\n  uint512m_T re;\r\n  uint512m_T im;\r\n} cuint512m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[17];\r\n} int544m_T;\r\n\r\ntypedef struct {\r\n  int544m_T re;\r\n  int544m_T im;\r\n} cint544m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[17];\r\n} uint544m_T;\r\n\r\ntypedef struct {\r\n  uint544m_T re;\r\n  uint544m_T im;\r\n} cuint544m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[18];\r\n} int576m_T;\r\n\r\ntypedef struct {\r\n  int576m_T re;\r\n  int576m_T im;\r\n} cint576m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[18];\r\n} uint576m_T;\r\n\r\ntypedef struct {\r\n  uint576m_T re;\r\n  uint576m_T im;\r\n} cuint576m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[19];\r\n} int608m_T;\r\n\r\ntypedef struct {\r\n  int608m_T re;\r\n  int608m_T im;\r\n} cint608m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[19];\r\n} uint608m_T;\r\n\r\ntypedef struct {\r\n  uint608m_T re;\r\n  uint608m_T im;\r\n} cuint608m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[20];\r\n} int640m_T;\r\n\r\ntypedef struct {\r\n  int640m_T re;\r\n  int640m_T im;\r\n} cint640m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[20];\r\n} uint640m_T;\r\n\r\ntypedef struct {\r\n  uint640m_T re;\r\n  uint640m_T im;\r\n} cuint640m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[21];\r\n} int672m_T;\r\n\r\ntypedef struct {\r\n  int672m_T re;\r\n  int672m_T im;\r\n} cint672m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[21];\r\n} uint672m_T;\r\n\r\ntypedef struct {\r\n  uint672m_T re;\r\n  uint672m_T im;\r\n} cuint672m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[22];\r\n} int704m_T;\r\n\r\ntypedef struct {\r\n  int704m_T re;\r\n  int704m_T im;\r\n} cint704m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[22];\r\n} uint704m_T;\r\n\r\ntypedef struct {\r\n  uint704m_T re;\r\n  uint704m_T im;\r\n} cuint704m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[23];\r\n} int736m_T;\r\n\r\ntypedef struct {\r\n  int736m_T re;\r\n  int736m_T im;\r\n} cint736m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[23];\r\n} uint736m_T;\r\n\r\ntypedef struct {\r\n  uint736m_T re;\r\n  uint736m_T im;\r\n} cuint736m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[24];\r\n} int768m_T;\r\n\r\ntypedef struct {\r\n  int768m_T re;\r\n  int768m_T im;\r\n} cint768m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[24];\r\n} uint768m_T;\r\n\r\ntypedef struct {\r\n  uint768m_T re;\r\n  uint768m_T im;\r\n} cuint768m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[25];\r\n} int800m_T;\r\n\r\ntypedef struct {\r\n  int800m_T re;\r\n  int800m_T im;\r\n} cint800m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[25];\r\n} uint800m_T;\r\n\r\ntypedef struct {\r\n  uint800m_T re;\r\n  uint800m_T im;\r\n} cuint800m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[26];\r\n} int832m_T;\r\n\r\ntypedef struct {\r\n  int832m_T re;\r\n  int832m_T im;\r\n} cint832m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[26];\r\n} uint832m_T;\r\n\r\ntypedef struct {\r\n  uint832m_T re;\r\n  uint832m_T im;\r\n} cuint832m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[27];\r\n} int864m_T;\r\n\r\ntypedef struct {\r\n  int864m_T re;\r\n  int864m_T im;\r\n} cint864m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[27];\r\n} uint864m_T;\r\n\r\ntypedef struct {\r\n  uint864m_T re;\r\n  uint864m_T im;\r\n} cuint864m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[28];\r\n} int896m_T;\r\n\r\ntypedef struct {\r\n  int896m_T re;\r\n  int896m_T im;\r\n} cint896m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[28];\r\n} uint896m_T;\r\n\r\ntypedef struct {\r\n  uint896m_T re;\r\n  uint896m_T im;\r\n} cuint896m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[29];\r\n} int928m_T;\r\n\r\ntypedef struct {\r\n  int928m_T re;\r\n  int928m_T im;\r\n} cint928m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[29];\r\n} uint928m_T;\r\n\r\ntypedef struct {\r\n  uint928m_T re;\r\n  uint928m_T im;\r\n} cuint928m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[30];\r\n} int960m_T;\r\n\r\ntypedef struct {\r\n  int960m_T re;\r\n  int960m_T im;\r\n} cint960m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[30];\r\n} uint960m_T;\r\n\r\ntypedef struct {\r\n  uint960m_T re;\r\n  uint960m_T im;\r\n} cuint960m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[31];\r\n} int992m_T;\r\n\r\ntypedef struct {\r\n  int992m_T re;\r\n  int992m_T im;\r\n} cint992m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[31];\r\n} uint992m_T;\r\n\r\ntypedef struct {\r\n  uint992m_T re;\r\n  uint992m_T im;\r\n} cuint992m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[32];\r\n} int1024m_T;\r\n\r\ntypedef struct {\r\n  int1024m_T re;\r\n  int1024m_T im;\r\n} cint1024m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[32];\r\n} uint1024m_T;\r\n\r\ntypedef struct {\r\n  uint1024m_T re;\r\n  uint1024m_T im;\r\n} cuint1024m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[33];\r\n} int1056m_T;\r\n\r\ntypedef struct {\r\n  int1056m_T re;\r\n  int1056m_T im;\r\n} cint1056m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[33];\r\n} uint1056m_T;\r\n\r\ntypedef struct {\r\n  uint1056m_T re;\r\n  uint1056m_T im;\r\n} cuint1056m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[34];\r\n} int1088m_T;\r\n\r\ntypedef struct {\r\n  int1088m_T re;\r\n  int1088m_T im;\r\n} cint1088m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[34];\r\n} uint1088m_T;\r\n\r\ntypedef struct {\r\n  uint1088m_T re;\r\n  uint1088m_T im;\r\n} cuint1088m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[35];\r\n} int1120m_T;\r\n\r\ntypedef struct {\r\n  int1120m_T re;\r\n  int1120m_T im;\r\n} cint1120m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[35];\r\n} uint1120m_T;\r\n\r\ntypedef struct {\r\n  uint1120m_T re;\r\n  uint1120m_T im;\r\n} cuint1120m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[36];\r\n} int1152m_T;\r\n\r\ntypedef struct {\r\n  int1152m_T re;\r\n  int1152m_T im;\r\n} cint1152m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[36];\r\n} uint1152m_T;\r\n\r\ntypedef struct {\r\n  uint1152m_T re;\r\n  uint1152m_T im;\r\n} cuint1152m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[37];\r\n} int1184m_T;\r\n\r\ntypedef struct {\r\n  int1184m_T re;\r\n  int1184m_T im;\r\n} cint1184m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[37];\r\n} uint1184m_T;\r\n\r\ntypedef struct {\r\n  uint1184m_T re;\r\n  uint1184m_T im;\r\n} cuint1184m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[38];\r\n} int1216m_T;\r\n\r\ntypedef struct {\r\n  int1216m_T re;\r\n  int1216m_T im;\r\n} cint1216m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[38];\r\n} uint1216m_T;\r\n\r\ntypedef struct {\r\n  uint1216m_T re;\r\n  uint1216m_T im;\r\n} cuint1216m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[39];\r\n} int1248m_T;\r\n\r\ntypedef struct {\r\n  int1248m_T re;\r\n  int1248m_T im;\r\n} cint1248m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[39];\r\n} uint1248m_T;\r\n\r\ntypedef struct {\r\n  uint1248m_T re;\r\n  uint1248m_T im;\r\n} cuint1248m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[40];\r\n} int1280m_T;\r\n\r\ntypedef struct {\r\n  int1280m_T re;\r\n  int1280m_T im;\r\n} cint1280m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[40];\r\n} uint1280m_T;\r\n\r\ntypedef struct {\r\n  uint1280m_T re;\r\n  uint1280m_T im;\r\n} cuint1280m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[41];\r\n} int1312m_T;\r\n\r\ntypedef struct {\r\n  int1312m_T re;\r\n  int1312m_T im;\r\n} cint1312m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[41];\r\n} uint1312m_T;\r\n\r\ntypedef struct {\r\n  uint1312m_T re;\r\n  uint1312m_T im;\r\n} cuint1312m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[42];\r\n} int1344m_T;\r\n\r\ntypedef struct {\r\n  int1344m_T re;\r\n  int1344m_T im;\r\n} cint1344m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[42];\r\n} uint1344m_T;\r\n\r\ntypedef struct {\r\n  uint1344m_T re;\r\n  uint1344m_T im;\r\n} cuint1344m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[43];\r\n} int1376m_T;\r\n\r\ntypedef struct {\r\n  int1376m_T re;\r\n  int1376m_T im;\r\n} cint1376m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[43];\r\n} uint1376m_T;\r\n\r\ntypedef struct {\r\n  uint1376m_T re;\r\n  uint1376m_T im;\r\n} cuint1376m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[44];\r\n} int1408m_T;\r\n\r\ntypedef struct {\r\n  int1408m_T re;\r\n  int1408m_T im;\r\n} cint1408m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[44];\r\n} uint1408m_T;\r\n\r\ntypedef struct {\r\n  uint1408m_T re;\r\n  uint1408m_T im;\r\n} cuint1408m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[45];\r\n} int1440m_T;\r\n\r\ntypedef struct {\r\n  int1440m_T re;\r\n  int1440m_T im;\r\n} cint1440m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[45];\r\n} uint1440m_T;\r\n\r\ntypedef struct {\r\n  uint1440m_T re;\r\n  uint1440m_T im;\r\n} cuint1440m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[46];\r\n} int1472m_T;\r\n\r\ntypedef struct {\r\n  int1472m_T re;\r\n  int1472m_T im;\r\n} cint1472m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[46];\r\n} uint1472m_T;\r\n\r\ntypedef struct {\r\n  uint1472m_T re;\r\n  uint1472m_T im;\r\n} cuint1472m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[47];\r\n} int1504m_T;\r\n\r\ntypedef struct {\r\n  int1504m_T re;\r\n  int1504m_T im;\r\n} cint1504m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[47];\r\n} uint1504m_T;\r\n\r\ntypedef struct {\r\n  uint1504m_T re;\r\n  uint1504m_T im;\r\n} cuint1504m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[48];\r\n} int1536m_T;\r\n\r\ntypedef struct {\r\n  int1536m_T re;\r\n  int1536m_T im;\r\n} cint1536m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[48];\r\n} uint1536m_T;\r\n\r\ntypedef struct {\r\n  uint1536m_T re;\r\n  uint1536m_T im;\r\n} cuint1536m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[49];\r\n} int1568m_T;\r\n\r\ntypedef struct {\r\n  int1568m_T re;\r\n  int1568m_T im;\r\n} cint1568m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[49];\r\n} uint1568m_T;\r\n\r\ntypedef struct {\r\n  uint1568m_T re;\r\n  uint1568m_T im;\r\n} cuint1568m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[50];\r\n} int1600m_T;\r\n\r\ntypedef struct {\r\n  int1600m_T re;\r\n  int1600m_T im;\r\n} cint1600m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[50];\r\n} uint1600m_T;\r\n\r\ntypedef struct {\r\n  uint1600m_T re;\r\n  uint1600m_T im;\r\n} cuint1600m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[51];\r\n} int1632m_T;\r\n\r\ntypedef struct {\r\n  int1632m_T re;\r\n  int1632m_T im;\r\n} cint1632m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[51];\r\n} uint1632m_T;\r\n\r\ntypedef struct {\r\n  uint1632m_T re;\r\n  uint1632m_T im;\r\n} cuint1632m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[52];\r\n} int1664m_T;\r\n\r\ntypedef struct {\r\n  int1664m_T re;\r\n  int1664m_T im;\r\n} cint1664m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[52];\r\n} uint1664m_T;\r\n\r\ntypedef struct {\r\n  uint1664m_T re;\r\n  uint1664m_T im;\r\n} cuint1664m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[53];\r\n} int1696m_T;\r\n\r\ntypedef struct {\r\n  int1696m_T re;\r\n  int1696m_T im;\r\n} cint1696m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[53];\r\n} uint1696m_T;\r\n\r\ntypedef struct {\r\n  uint1696m_T re;\r\n  uint1696m_T im;\r\n} cuint1696m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[54];\r\n} int1728m_T;\r\n\r\ntypedef struct {\r\n  int1728m_T re;\r\n  int1728m_T im;\r\n} cint1728m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[54];\r\n} uint1728m_T;\r\n\r\ntypedef struct {\r\n  uint1728m_T re;\r\n  uint1728m_T im;\r\n} cuint1728m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[55];\r\n} int1760m_T;\r\n\r\ntypedef struct {\r\n  int1760m_T re;\r\n  int1760m_T im;\r\n} cint1760m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[55];\r\n} uint1760m_T;\r\n\r\ntypedef struct {\r\n  uint1760m_T re;\r\n  uint1760m_T im;\r\n} cuint1760m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[56];\r\n} int1792m_T;\r\n\r\ntypedef struct {\r\n  int1792m_T re;\r\n  int1792m_T im;\r\n} cint1792m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[56];\r\n} uint1792m_T;\r\n\r\ntypedef struct {\r\n  uint1792m_T re;\r\n  uint1792m_T im;\r\n} cuint1792m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[57];\r\n} int1824m_T;\r\n\r\ntypedef struct {\r\n  int1824m_T re;\r\n  int1824m_T im;\r\n} cint1824m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[57];\r\n} uint1824m_T;\r\n\r\ntypedef struct {\r\n  uint1824m_T re;\r\n  uint1824m_T im;\r\n} cuint1824m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[58];\r\n} int1856m_T;\r\n\r\ntypedef struct {\r\n  int1856m_T re;\r\n  int1856m_T im;\r\n} cint1856m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[58];\r\n} uint1856m_T;\r\n\r\ntypedef struct {\r\n  uint1856m_T re;\r\n  uint1856m_T im;\r\n} cuint1856m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[59];\r\n} int1888m_T;\r\n\r\ntypedef struct {\r\n  int1888m_T re;\r\n  int1888m_T im;\r\n} cint1888m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[59];\r\n} uint1888m_T;\r\n\r\ntypedef struct {\r\n  uint1888m_T re;\r\n  uint1888m_T im;\r\n} cuint1888m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[60];\r\n} int1920m_T;\r\n\r\ntypedef struct {\r\n  int1920m_T re;\r\n  int1920m_T im;\r\n} cint1920m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[60];\r\n} uint1920m_T;\r\n\r\ntypedef struct {\r\n  uint1920m_T re;\r\n  uint1920m_T im;\r\n} cuint1920m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[61];\r\n} int1952m_T;\r\n\r\ntypedef struct {\r\n  int1952m_T re;\r\n  int1952m_T im;\r\n} cint1952m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[61];\r\n} uint1952m_T;\r\n\r\ntypedef struct {\r\n  uint1952m_T re;\r\n  uint1952m_T im;\r\n} cuint1952m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[62];\r\n} int1984m_T;\r\n\r\ntypedef struct {\r\n  int1984m_T re;\r\n  int1984m_T im;\r\n} cint1984m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[62];\r\n} uint1984m_T;\r\n\r\ntypedef struct {\r\n  uint1984m_T re;\r\n  uint1984m_T im;\r\n} cuint1984m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[63];\r\n} int2016m_T;\r\n\r\ntypedef struct {\r\n  int2016m_T re;\r\n  int2016m_T im;\r\n} cint2016m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[63];\r\n} uint2016m_T;\r\n\r\ntypedef struct {\r\n  uint2016m_T re;\r\n  uint2016m_T im;\r\n} cuint2016m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[64];\r\n} int2048m_T;\r\n\r\ntypedef struct {\r\n  int2048m_T re;\r\n  int2048m_T im;\r\n} cint2048m_T;\r\n\r\ntypedef struct {\r\n  uint32_T chunks[64];\r\n} uint2048m_T;\r\n\r\ntypedef struct {\r\n  uint2048m_T re;\r\n  uint2048m_T im;\r\n} cuint2048m_T;\r\n\r\n#endif                                 /* MULTIWORD_TYPES_H */\r\n"},{"name":"rt_nonfinite.cpp","type":"source","group":"sharedutility","path":"C:\\Users\\Gabriel Fernandes\\Desktop\\Tello\\slprj\\grt\\_sharedutils","tag":"","groupDisplay":"Shared files","code":"/*\r\n * rt_nonfinite.cpp\r\n *\r\n * Sponsored License - for use in support of a program or activity\r\n * sponsored by MathWorks.  Not for government, commercial or other\r\n * non-sponsored organizational use.\r\n *\r\n * Code generation for model \"NumLinearModel\".\r\n *\r\n * Model version              : 6.27\r\n * Simulink Coder version : 25.1 (R2025a) 21-Nov-2024\r\n * C++ source code generated on : Fri May 30 20:21:36 2025\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n\r\nextern \"C\"\r\n{\r\n\r\n#include \"rt_nonfinite.h\"\r\n\r\n}\r\n\r\n#include \"limits\"\r\n#include \"cmath\"\r\n\r\nextern \"C\"\r\n{\r\n  real_T rtNaN { -std::numeric_limits<real_T>::quiet_NaN() };\r\n\r\n  real_T rtInf { std::numeric_limits<real_T>::infinity() };\r\n\r\n  real_T rtMinusInf { -std::numeric_limits<real_T>::infinity() };\r\n\r\n  real32_T rtNaNF { -std::numeric_limits<real32_T>::quiet_NaN() };\r\n\r\n  real32_T rtInfF { std::numeric_limits<real32_T>::infinity() };\r\n\r\n  real32_T rtMinusInfF { -std::numeric_limits<real32_T>::infinity() };\r\n}\r\n\r\nextern \"C\"\r\n{\r\n  /* Test if value is infinite */\r\n  boolean_T rtIsInf(real_T value)\r\n  {\r\n    return std::isinf(value);\r\n  }\r\n\r\n  /* Test if single-precision value is infinite */\r\n  boolean_T rtIsInfF(real32_T value)\r\n  {\r\n    return std::isinf(value);\r\n  }\r\n\r\n  /* Test if value is not a number */\r\n  boolean_T rtIsNaN(real_T value)\r\n  {\r\n    return std::isnan(value);\r\n  }\r\n\r\n  /* Test if single-precision value is not a number */\r\n  boolean_T rtIsNaNF(real32_T value)\r\n  {\r\n    return std::isnan(value);\r\n  }\r\n}\r\n"},{"name":"rt_nonfinite.h","type":"header","group":"sharedutility","path":"C:\\Users\\Gabriel Fernandes\\Desktop\\Tello\\slprj\\grt\\_sharedutils","tag":"","groupDisplay":"Shared files","code":"/*\r\n * rt_nonfinite.h\r\n *\r\n * Sponsored License - for use in support of a program or activity\r\n * sponsored by MathWorks.  Not for government, commercial or other\r\n * non-sponsored organizational use.\r\n *\r\n * Code generation for model \"NumLinearModel\".\r\n *\r\n * Model version              : 6.27\r\n * Simulink Coder version : 25.1 (R2025a) 21-Nov-2024\r\n * C++ source code generated on : Fri May 30 20:21:36 2025\r\n */\r\n\r\n#ifndef rt_nonfinite_h_\r\n#define rt_nonfinite_h_\r\n#include \"rtwtypes.h\"\r\n#ifdef __cplusplus\r\n\r\nextern \"C\"\r\n{\r\n\r\n#endif\r\n\r\n  extern real_T rtInf;\r\n  extern real_T rtMinusInf;\r\n  extern real_T rtNaN;\r\n  extern real32_T rtInfF;\r\n  extern real32_T rtMinusInfF;\r\n  extern real32_T rtNaNF;\r\n  extern boolean_T rtIsInf(real_T value);\r\n  extern boolean_T rtIsInfF(real32_T value);\r\n  extern boolean_T rtIsNaN(real_T value);\r\n  extern boolean_T rtIsNaNF(real32_T value);\r\n\r\n#ifdef __cplusplus\r\n\r\n}                                      /* extern \"C\" */\r\n\r\n#endif\r\n#endif                                 /* rt_nonfinite_h_ */\r\n"},{"name":"rtwtypes.h","type":"header","group":"sharedutility","path":"C:\\Users\\Gabriel Fernandes\\Desktop\\Tello\\slprj\\grt\\_sharedutils","tag":"","groupDisplay":"Shared files","code":"/*\r\n * rtwtypes.h\r\n *\r\n * Sponsored License - for use in support of a program or activity\r\n * sponsored by MathWorks.  Not for government, commercial or other\r\n * non-sponsored organizational use.\r\n *\r\n * Code generation for model \"NumLinearModel\".\r\n *\r\n * Model version              : 6.27\r\n * Simulink Coder version : 25.1 (R2025a) 21-Nov-2024\r\n * C++ source code generated on : Fri May 30 20:21:36 2025\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n#include \"tmwtypes.h\"\r\n#ifndef POINTER_T\r\n#define POINTER_T\r\n\r\ntypedef void * pointer_T;\r\n\r\n#endif\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n#endif                                 /* RTWTYPES_H */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};